<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadataInfo;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class AppMapperConfrontationHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id']) || (! empty($this->class->fieldMappings['id']['nullable']) && array_key_exists('_id', $data))) {
            $value = $data['_id'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['id']['type'];
                $return = $value instanceof \MongoId ? (string) $value : $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['player1'])) {
            $reference = $data['player1'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['player1'], $reference);
            $mongoId = ClassMetadataInfo::getReferenceId($reference, $this->class->fieldMappings['player1']['storeAs']);
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['player1']->setValue($document, $return);
            $hydratedData['player1'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['player2'])) {
            $reference = $data['player2'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['player2'], $reference);
            $mongoId = ClassMetadataInfo::getReferenceId($reference, $this->class->fieldMappings['player2']['storeAs']);
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['player2']->setValue($document, $return);
            $hydratedData['player2'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['winner'])) {
            $reference = $data['winner'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['winner'], $reference);
            $mongoId = ClassMetadataInfo::getReferenceId($reference, $this->class->fieldMappings['winner']['storeAs']);
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['winner']->setValue($document, $return);
            $hydratedData['winner'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['key']) || (! empty($this->class->fieldMappings['stage']['nullable']) && array_key_exists('key', $data))) {
            $value = $data['key'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['stage']['type'];
                $return = (int) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['stage']->setValue($document, $return);
            $hydratedData['stage'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['order']) || (! empty($this->class->fieldMappings['order']['nullable']) && array_key_exists('order', $data))) {
            $value = $data['order'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['order']['type'];
                $return = (int) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['order']->setValue($document, $return);
            $hydratedData['order'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['logJson']) || (! empty($this->class->fieldMappings['logJson']['nullable']) && array_key_exists('logJson', $data))) {
            $value = $data['logJson'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['logJson']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['logJson']->setValue($document, $return);
            $hydratedData['logJson'] = $return;
        }
        return $hydratedData;
    }
}