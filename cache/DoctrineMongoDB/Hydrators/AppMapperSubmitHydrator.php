<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadataInfo;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class AppMapperSubmitHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id']) || (! empty($this->class->fieldMappings['id']['nullable']) && array_key_exists('_id', $data))) {
            $value = $data['_id'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['id']['type'];
                $return = $value instanceof \MongoId ? (string) $value : $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        $mapping = $this->class->fieldMappings['user'];
        $className = $mapping['targetDocument'];
        $targetClass = $this->dm->getClassMetadata($mapping['targetDocument']);
        $mappedByMapping = $targetClass->fieldMappings[$mapping['mappedBy']];
        $mappedByFieldName = ClassMetadataInfo::getReferenceFieldName($mappedByMapping['storeAs'], $mapping['mappedBy']);
        $criteria = array_merge(
            array($mappedByFieldName => $data['_id']),
            isset($this->class->fieldMappings['user']['criteria']) ? $this->class->fieldMappings['user']['criteria'] : array()
        );
        $sort = isset($this->class->fieldMappings['user']['sort']) ? $this->class->fieldMappings['user']['sort'] : array();
        $return = $this->unitOfWork->getDocumentPersister($className)->load($criteria, null, array(), 0, $sort);
        $this->class->reflFields['user']->setValue($document, $return);
        $hydratedData['user'] = $return;

        /** @Field(type="string") */
        if (isset($data['code']) || (! empty($this->class->fieldMappings['code']['nullable']) && array_key_exists('code', $data))) {
            $value = $data['code'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['code']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['code']->setValue($document, $return);
            $hydratedData['code'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['nickname']) || (! empty($this->class->fieldMappings['nickname']['nullable']) && array_key_exists('nickname', $data))) {
            $value = $data['nickname'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['nickname']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['nickname']->setValue($document, $return);
            $hydratedData['nickname'] = $return;
        }
        return $hydratedData;
    }
}